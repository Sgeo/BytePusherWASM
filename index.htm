<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>BytePusher</title>
        <meta name="viewport" content="width=device-width">
        <style>
            #layout td {
                font-family: monospace;
                border-style: inset;
            }

        </style>
    </head>
    <body>
        <div id="selector">
            <ul>
                <li><button type="button" data-url="roms/Palette Test.BytePusher">Palette Test by Javamannen</button></li>
                <li><button type="button" data-url="roms/Scrolling Logo.BytePusher">Scrolling Logo by Javamannen</button></li>
                <li><button type="button" data-url="roms/Keyboard Test.BytePusher">Keyboard Test by Javamannen</button></li>
                <li><button type="button" data-url="roms/Munching_Squares.BytePusher">Munching Squares by zzo38</button></li>
                <li><button type="button" data-url="roms/Audio Test.BytePusher">Audio Test by Javamannen</button></li>
                <li><button type="button" data-url="roms/SineScroller.BytePusher">SineScroller by Javamannen</button></li>
                <li><button type="button" data-url="roms/Sprites.BytePusher">Sprites by Javamannen</button></li>
                <li><button type="button" data-url="roms/invertloopsine.BytePusher">"Invert Loop" sine by Ben Russell</button></li>
                <li><button type="button" data-url="roms/nyan.bp">Nyan Cat by Nucular</button></li>
            </ul>
        </div>
        <div><canvas width="256" height="256"></canvas></div>
        <div>Performance: <span id="performance">n/a</span> ms per frame</div>
        <div><table id="layout"></table></div>
        <div><span id="layoutblurb"></span></div>
        <script type="module">
            import { BytePusher } from "./bytepusher.js";
            window.addEventListener("popstate", function(event) {
                if(event.state === "playing") {
                    window.location.reload();
                }
            });
            const performanceSpan = document.querySelector("#performance");
            document.querySelector("#selector").addEventListener("click", async function(event) {
                if(!event.target.dataset.url) {
                    return;
                }
                document.querySelector("#selector").style.display = "none";
                let audioCtx = new AudioContext({
                    sampleRate: 256 * 60,
                });
                const canvas = document.querySelector("canvas");
                const ctx = canvas.getContext("2d");
                window.bp = new BytePusher;
                await bp.init(audioCtx);
                document.body.addEventListener("keydown", (event) => {
                    bp.keydown(event.code);
                });
                document.body.addEventListener("keyup", (event) => {
                    bp.keyup(event.code);
                });
                bp.keyboardLayout().then(layout => {
                    let layoutTable = document.querySelector("#layout");
                    for(let row = 0; row < 4; row++) {
                        let rowElem = layoutTable.insertRow();
                        for(let column = 0; column < 4; column++) {
                            let columnElem = rowElem.insertCell();
                            columnElem.textContent = layout[4 * row + column];
                        }
                    }
                    if(!navigator?.keyboard?.getLayoutMap) {
                        document.querySelector("#layoutblurb").textContent = "(Keyboard layout may not be accurate for your system. Keyboard Layout API not supported)";
                    }
                });
                let rom = await fetch(event.target.dataset.url).then(r => r.arrayBuffer());
                bp.load(rom);
                history.pushState("playing", "", null);
                requestAnimationFrame(function frame(time) {
                    requestAnimationFrame(frame);
                    let start = performance.now();
                    bp.frame(ctx);
                    let perfTime = performance.now() - start;
                    performanceSpan.textContent = perfTime;
                });
            });

        </script>
    </body>
</html>