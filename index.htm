<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>BytePusher</title>
        <meta name="viewport" content="width=device-width">
        <style>
            #layout td {
                font-family: monospace;
                border-style: inset;
            }

        </style>
    </head>
    <body>
        <div id="selector">
            <ul>
                <li><button type="button" data-url="roms/Palette Test.BytePusher">Palette Test by Javamannen</button></li>
                <li><button type="button" data-url="roms/Scrolling Logo.BytePusher">Scrolling Logo by Javamannen</button></li>
                <li><button type="button" data-url="roms/Keyboard Test.BytePusher">Keyboard Test by Javamannen</button></li>
                <li><button type="button" data-url="roms/Munching_Squares.BytePusher">Munching Squares by zzo38</button></li>
                <li><button type="button" data-url="roms/Audio Test.BytePusher">Audio Test by Javamannen</button></li>
                <li><button type="button" data-url="roms/SineScroller.BytePusher">SineScroller by Javamannen</button></li>
                <li><button type="button" data-url="roms/Sprites.BytePusher">Sprites by Javamannen</button></li>
                <li><button type="button" data-url="roms/invertloopsine.BytePusher">"Invert Loop" sine by Ben Russell</button></li>
                <li><button type="button" data-url="roms/nyan.bp">Nyan Cat by Nucular</button></li>
            </ul>
        </div>
        <div><canvas width="256" height="256"></canvas></div>
        <button type="button" id="pauseresume">Pause</button>
        <div><table id="layout"></table></div>
        <div><span id="layoutblurb"></span></div>
        <script type="module">
            import { BytePusher } from "./bytepusher.js";

            let bp = null;
            async function init() {
                // Call this only on user activation.
                // Lazy init
                if(bp) return;
                const canvas = document.querySelector("canvas");
                const ctx = canvas.getContext("2d");
                let audioCtx = new AudioContext({
                    sampleRate: 256 * 60,
                });
                bp = new BytePusher;
                await bp.init(audioCtx, ctx);
                document.body.addEventListener("keydown", (event) => {
                    bp.keydown(event.code);
                });
                document.body.addEventListener("keyup", (event) => {
                    bp.keyup(event.code);
                });
                let paused = false;
                let pauseresumeElem = document.querySelector("#pauseresume")
                pauseresumeElem.addEventListener("click", (event) => {
                    if(paused) {
                        bp.resume();
                        pauseresumeElem.textContent = "Pause";
                    } else {
                        bp.pause();
                        pauseresumeElem.textContent = "Resume";
                    }
                    paused = !paused;
                });

                bp.keyboardLayout().then(layout => {
                    let layoutTable = document.querySelector("#layout");
                    for(let row = 0; row < 4; row++) {
                        let rowElem = layoutTable.insertRow();
                        for(let column = 0; column < 4; column++) {
                            let columnElem = rowElem.insertCell();
                            columnElem.textContent = layout[4 * row + column];
                        }
                    }
                    if(!navigator?.keyboard?.getLayoutMap) {
                        document.querySelector("#layoutblurb").textContent = "(Keyboard layout may not be accurate for your system. Keyboard Layout API not supported)";
                    }
                });
            }
            document.querySelector("#selector").addEventListener("click", async function(event) {
                if(!event.target.dataset.url) {
                    return;
                }
                await init();
                let rom = await fetch(event.target.dataset.url).then(r => r.arrayBuffer());
                bp.rom(rom);
            });

        </script>
    </body>
</html>